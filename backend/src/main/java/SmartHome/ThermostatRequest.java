//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `thermostat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class ThermostatRequest implements java.lang.Cloneable,
                                          java.io.Serializable
{
    public ThermostatOperation operation;

    public float temperature;

    public String presetName;

    public ThermostatRequest()
    {
        this.operation = ThermostatOperation.CLASSIC;
        this.presetName = "";
    }

    public ThermostatRequest(ThermostatOperation operation, float temperature, String presetName)
    {
        this.operation = operation;
        this.temperature = temperature;
        this.presetName = presetName;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ThermostatRequest r = null;
        if(rhs instanceof ThermostatRequest)
        {
            r = (ThermostatRequest)rhs;
        }

        if(r != null)
        {
            if(this.operation != r.operation)
            {
                if(this.operation == null || r.operation == null || !this.operation.equals(r.operation))
                {
                    return false;
                }
            }
            if(this.temperature != r.temperature)
            {
                return false;
            }
            if(this.presetName != r.presetName)
            {
                if(this.presetName == null || r.presetName == null || !this.presetName.equals(r.presetName))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::ThermostatRequest");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, operation);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temperature);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, presetName);
        return h_;
    }

    public ThermostatRequest clone()
    {
        ThermostatRequest c = null;
        try
        {
            c = (ThermostatRequest)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ThermostatOperation.ice_write(ostr, this.operation);
        ostr.writeFloat(this.temperature);
        ostr.writeString(this.presetName);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.operation = ThermostatOperation.ice_read(istr);
        this.temperature = istr.readFloat();
        this.presetName = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ThermostatRequest v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ThermostatRequest ice_read(com.zeroc.Ice.InputStream istr)
    {
        ThermostatRequest v = new ThermostatRequest();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ThermostatRequest> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ThermostatRequest v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ThermostatRequest> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(ThermostatRequest.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ThermostatRequest _nullMarshalValue = new ThermostatRequest();

    /** @hidden */
    public static final long serialVersionUID = 806219307L;
}
