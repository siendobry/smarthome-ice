# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `thermostat.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import generated.preset_ice

# Included module SmartHome
_M_SmartHome = Ice.openModule('generated.SmartHome')

# Start of module SmartHome
__name__ = 'SmartHome'

if 'InvalidTemperatureRangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidTemperatureRangeException = Ice.createTempClass()
    class InvalidTemperatureRangeException(Ice.UserException):
        def __init__(self, badValue=0.0, minValue=0.0, maxValue=0.0, message="Value out of bounds"):
            self.badValue = badValue
            self.minValue = minValue
            self.maxValue = maxValue
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidTemperatureRangeException'

    _M_SmartHome._t_InvalidTemperatureRangeException = IcePy.defineException('::SmartHome::InvalidTemperatureRangeException', InvalidTemperatureRangeException, (), False, None, (
        ('badValue', (), IcePy._t_float, False, 0),
        ('minValue', (), IcePy._t_float, False, 0),
        ('maxValue', (), IcePy._t_float, False, 0),
        ('message', (), IcePy._t_string, False, 0)
    ))
    InvalidTemperatureRangeException._ice_type = _M_SmartHome._t_InvalidTemperatureRangeException

    _M_SmartHome.InvalidTemperatureRangeException = InvalidTemperatureRangeException
    del InvalidTemperatureRangeException

if 'ThermostatOperation' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatOperation = Ice.createTempClass()
    class ThermostatOperation(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ThermostatOperation.CLASSIC = ThermostatOperation("CLASSIC", 0)
    ThermostatOperation.PRESET = ThermostatOperation("PRESET", 1)
    ThermostatOperation._enumerators = { 0:ThermostatOperation.CLASSIC, 1:ThermostatOperation.PRESET }

    _M_SmartHome._t_ThermostatOperation = IcePy.defineEnum('::SmartHome::ThermostatOperation', ThermostatOperation, (), ThermostatOperation._enumerators)

    _M_SmartHome.ThermostatOperation = ThermostatOperation
    del ThermostatOperation

if 'ThermostatRequest' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatRequest = Ice.createTempClass()
    class ThermostatRequest(object):
        def __init__(self, operation=_M_SmartHome.ThermostatOperation.CLASSIC, temperature=0.0, presetName=''):
            self.operation = operation
            self.temperature = temperature
            self.presetName = presetName

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.ThermostatRequest):
                return NotImplemented
            else:
                if self.operation != other.operation:
                    return False
                if self.temperature != other.temperature:
                    return False
                if self.presetName != other.presetName:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermostatRequest)

        __repr__ = __str__

    _M_SmartHome._t_ThermostatRequest = IcePy.defineStruct('::SmartHome::ThermostatRequest', ThermostatRequest, (), (
        ('operation', (), _M_SmartHome._t_ThermostatOperation),
        ('temperature', (), IcePy._t_float),
        ('presetName', (), IcePy._t_string)
    ))

    _M_SmartHome.ThermostatRequest = ThermostatRequest
    del ThermostatRequest

if '_t_TemperaturePresets' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_TemperaturePresets = IcePy.defineDictionary('::SmartHome::TemperaturePresets', (), IcePy._t_string, IcePy._t_float)

_M_SmartHome._t_Thermostat = IcePy.defineValue('::SmartHome::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_getTemperature.end(self, _r)

        def setTemperature(self, request, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.invoke(self, ((request, ), context))

        def setTemperatureAsync(self, request, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.invokeAsync(self, ((request, ), context))

        def begin_setTemperature(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_setTemperature.end(self, _r)

        def getPresets(self, context=None):
            return _M_SmartHome.Thermostat._op_getPresets.invoke(self, ((), context))

        def getPresetsAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getPresets.invokeAsync(self, ((), context))

        def begin_getPresets(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getPresets.begin(self, ((), _response, _ex, _sent, context))

        def end_getPresets(self, _r):
            return _M_SmartHome.Thermostat._op_getPresets.end(self, _r)

        def addPreset(self, name, temperature, context=None):
            return _M_SmartHome.Thermostat._op_addPreset.invoke(self, ((name, temperature), context))

        def addPresetAsync(self, name, temperature, context=None):
            return _M_SmartHome.Thermostat._op_addPreset.invokeAsync(self, ((name, temperature), context))

        def begin_addPreset(self, name, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_addPreset.begin(self, ((name, temperature), _response, _ex, _sent, context))

        def end_addPreset(self, _r):
            return _M_SmartHome.Thermostat._op_addPreset.end(self, _r)

        def editPreset(self, name, temperature, context=None):
            return _M_SmartHome.Thermostat._op_editPreset.invoke(self, ((name, temperature), context))

        def editPresetAsync(self, name, temperature, context=None):
            return _M_SmartHome.Thermostat._op_editPreset.invokeAsync(self, ((name, temperature), context))

        def begin_editPreset(self, name, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_editPreset.begin(self, ((name, temperature), _response, _ex, _sent, context))

        def end_editPreset(self, _r):
            return _M_SmartHome.Thermostat._op_editPreset.end(self, _r)

        def removePreset(self, name, context=None):
            return _M_SmartHome.Thermostat._op_removePreset.invoke(self, ((name, ), context))

        def removePresetAsync(self, name, context=None):
            return _M_SmartHome.Thermostat._op_removePreset.invokeAsync(self, ((name, ), context))

        def begin_removePreset(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_removePreset.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_removePreset(self, _r):
            return _M_SmartHome.Thermostat._op_removePreset.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ThermostatPrx.ice_checkedCast(proxy, '::SmartHome::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'
    _M_SmartHome._t_ThermostatPrx = IcePy.defineProxy('::SmartHome::Thermostat', ThermostatPrx)

    _M_SmartHome.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_SmartHome.Thermostat = Ice.createTempClass()
    class Thermostat(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Thermostat')

        def ice_id(self, current=None):
            return '::SmartHome::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, request, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getPresets(self, current=None):
            raise NotImplementedError("servant method 'getPresets' not implemented")

        def addPreset(self, name, temperature, current=None):
            raise NotImplementedError("servant method 'addPreset' not implemented")

        def editPreset(self, name, temperature, current=None):
            raise NotImplementedError("servant method 'editPreset' not implemented")

        def removePreset(self, name, current=None):
            raise NotImplementedError("servant method 'removePreset' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermostatDisp)

        __repr__ = __str__

    _M_SmartHome._t_ThermostatDisp = IcePy.defineClass('::SmartHome::Thermostat', Thermostat, (), None, ())
    Thermostat._ice_type = _M_SmartHome._t_ThermostatDisp

    Thermostat._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Thermostat._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_ThermostatRequest, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_InvalidTemperatureRangeException, _M_SmartHome._t_NonExistentPreset))
    Thermostat._op_getPresets = IcePy.Operation('getPresets', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_TemperaturePresets, False, 0), ())
    Thermostat._op_addPreset = IcePy.Operation('addPreset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0)), (), None, (_M_SmartHome._t_InvalidTemperatureRangeException,))
    Thermostat._op_editPreset = IcePy.Operation('editPreset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0)), (), None, (_M_SmartHome._t_InvalidTemperatureRangeException,))
    Thermostat._op_removePreset = IcePy.Operation('removePreset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_SmartHome.Thermostat = Thermostat
    del Thermostat

# End of module SmartHome
