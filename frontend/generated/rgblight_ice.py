# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `rgblight.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import generated.light_ice
import generated.preset_ice

# Included module SmartHome
_M_SmartHome = Ice.openModule('generated.SmartHome')

# Start of module SmartHome
__name__ = 'SmartHome'

if 'InvalidColorRangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidColorRangeException = Ice.createTempClass()
    class InvalidColorRangeException(Ice.UserException):
        def __init__(self, badValue=0, minValue=0, maxValue=0, message="Value out of bounds"):
            self.badValue = badValue
            self.minValue = minValue
            self.maxValue = maxValue
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidColorRangeException'

    _M_SmartHome._t_InvalidColorRangeException = IcePy.defineException('::SmartHome::InvalidColorRangeException', InvalidColorRangeException, (), False, None, (
        ('badValue', (), IcePy._t_short, False, 0),
        ('minValue', (), IcePy._t_short, False, 0),
        ('maxValue', (), IcePy._t_short, False, 0),
        ('message', (), IcePy._t_string, False, 0)
    ))
    InvalidColorRangeException._ice_type = _M_SmartHome._t_InvalidColorRangeException

    _M_SmartHome.InvalidColorRangeException = InvalidColorRangeException
    del InvalidColorRangeException

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, red=0, green=0, blue=0):
            self.red = red
            self.green = green
            self.blue = blue

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.red)
            _h = 5 * _h + Ice.getHash(self.green)
            _h = 5 * _h + Ice.getHash(self.blue)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Color):
                return NotImplemented
            else:
                if self.red is None or other.red is None:
                    if self.red != other.red:
                        return (-1 if self.red is None else 1)
                else:
                    if self.red < other.red:
                        return -1
                    elif self.red > other.red:
                        return 1
                if self.green is None or other.green is None:
                    if self.green != other.green:
                        return (-1 if self.green is None else 1)
                else:
                    if self.green < other.green:
                        return -1
                    elif self.green > other.green:
                        return 1
                if self.blue is None or other.blue is None:
                    if self.blue != other.blue:
                        return (-1 if self.blue is None else 1)
                else:
                    if self.blue < other.blue:
                        return -1
                    elif self.blue > other.blue:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Color)

        __repr__ = __str__

    _M_SmartHome._t_Color = IcePy.defineStruct('::SmartHome::Color', Color, (), (
        ('red', (), IcePy._t_short),
        ('green', (), IcePy._t_short),
        ('blue', (), IcePy._t_short)
    ))

    _M_SmartHome.Color = Color
    del Color

if 'RgbLightOperation' not in _M_SmartHome.__dict__:
    _M_SmartHome.RgbLightOperation = Ice.createTempClass()
    class RgbLightOperation(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    RgbLightOperation.CLASSIC = RgbLightOperation("CLASSIC", 0)
    RgbLightOperation.PRESET = RgbLightOperation("PRESET", 1)
    RgbLightOperation._enumerators = { 0:RgbLightOperation.CLASSIC, 1:RgbLightOperation.PRESET }

    _M_SmartHome._t_RgbLightOperation = IcePy.defineEnum('::SmartHome::RgbLightOperation', RgbLightOperation, (), RgbLightOperation._enumerators)

    _M_SmartHome.RgbLightOperation = RgbLightOperation
    del RgbLightOperation

if 'RgbLightRequest' not in _M_SmartHome.__dict__:
    _M_SmartHome.RgbLightRequest = Ice.createTempClass()
    class RgbLightRequest(object):
        def __init__(self, operation=_M_SmartHome.RgbLightOperation.CLASSIC, color=Ice._struct_marker, presetName=''):
            self.operation = operation
            if color is Ice._struct_marker:
                self.color = _M_SmartHome.Color()
            else:
                self.color = color
            self.presetName = presetName

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.operation)
            _h = 5 * _h + Ice.getHash(self.color)
            _h = 5 * _h + Ice.getHash(self.presetName)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.RgbLightRequest):
                return NotImplemented
            else:
                if self.operation is None or other.operation is None:
                    if self.operation != other.operation:
                        return (-1 if self.operation is None else 1)
                else:
                    if self.operation < other.operation:
                        return -1
                    elif self.operation > other.operation:
                        return 1
                if self.color is None or other.color is None:
                    if self.color != other.color:
                        return (-1 if self.color is None else 1)
                else:
                    if self.color < other.color:
                        return -1
                    elif self.color > other.color:
                        return 1
                if self.presetName is None or other.presetName is None:
                    if self.presetName != other.presetName:
                        return (-1 if self.presetName is None else 1)
                else:
                    if self.presetName < other.presetName:
                        return -1
                    elif self.presetName > other.presetName:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RgbLightRequest)

        __repr__ = __str__

    _M_SmartHome._t_RgbLightRequest = IcePy.defineStruct('::SmartHome::RgbLightRequest', RgbLightRequest, (), (
        ('operation', (), _M_SmartHome._t_RgbLightOperation),
        ('color', (), _M_SmartHome._t_Color),
        ('presetName', (), IcePy._t_string)
    ))

    _M_SmartHome.RgbLightRequest = RgbLightRequest
    del RgbLightRequest

if '_t_ColorPresets' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_ColorPresets = IcePy.defineDictionary('::SmartHome::ColorPresets', (), IcePy._t_string, _M_SmartHome._t_Color)

_M_SmartHome._t_RgbLight = IcePy.defineValue('::SmartHome::RgbLight', Ice.Value, -1, (), False, True, None, ())

if 'RgbLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RgbLightPrx = Ice.createTempClass()
    class RgbLightPrx(_M_SmartHome.LightPrx):

        def getColor(self, context=None):
            return _M_SmartHome.RgbLight._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHome.RgbLight._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHome.RgbLight._op_getColor.end(self, _r)

        def changeColor(self, request, context=None):
            return _M_SmartHome.RgbLight._op_changeColor.invoke(self, ((request, ), context))

        def changeColorAsync(self, request, context=None):
            return _M_SmartHome.RgbLight._op_changeColor.invokeAsync(self, ((request, ), context))

        def begin_changeColor(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_changeColor.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_changeColor(self, _r):
            return _M_SmartHome.RgbLight._op_changeColor.end(self, _r)

        def getPresets(self, context=None):
            return _M_SmartHome.RgbLight._op_getPresets.invoke(self, ((), context))

        def getPresetsAsync(self, context=None):
            return _M_SmartHome.RgbLight._op_getPresets.invokeAsync(self, ((), context))

        def begin_getPresets(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_getPresets.begin(self, ((), _response, _ex, _sent, context))

        def end_getPresets(self, _r):
            return _M_SmartHome.RgbLight._op_getPresets.end(self, _r)

        def addPreset(self, name, color, context=None):
            return _M_SmartHome.RgbLight._op_addPreset.invoke(self, ((name, color), context))

        def addPresetAsync(self, name, color, context=None):
            return _M_SmartHome.RgbLight._op_addPreset.invokeAsync(self, ((name, color), context))

        def begin_addPreset(self, name, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_addPreset.begin(self, ((name, color), _response, _ex, _sent, context))

        def end_addPreset(self, _r):
            return _M_SmartHome.RgbLight._op_addPreset.end(self, _r)

        def editPreset(self, name, color, context=None):
            return _M_SmartHome.RgbLight._op_editPreset.invoke(self, ((name, color), context))

        def editPresetAsync(self, name, color, context=None):
            return _M_SmartHome.RgbLight._op_editPreset.invokeAsync(self, ((name, color), context))

        def begin_editPreset(self, name, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_editPreset.begin(self, ((name, color), _response, _ex, _sent, context))

        def end_editPreset(self, _r):
            return _M_SmartHome.RgbLight._op_editPreset.end(self, _r)

        def removePreset(self, name, context=None):
            return _M_SmartHome.RgbLight._op_removePreset.invoke(self, ((name, ), context))

        def removePresetAsync(self, name, context=None):
            return _M_SmartHome.RgbLight._op_removePreset.invokeAsync(self, ((name, ), context))

        def begin_removePreset(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RgbLight._op_removePreset.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_removePreset(self, _r):
            return _M_SmartHome.RgbLight._op_removePreset.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RgbLightPrx.ice_checkedCast(proxy, '::SmartHome::RgbLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RgbLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RgbLight'
    _M_SmartHome._t_RgbLightPrx = IcePy.defineProxy('::SmartHome::RgbLight', RgbLightPrx)

    _M_SmartHome.RgbLightPrx = RgbLightPrx
    del RgbLightPrx

    _M_SmartHome.RgbLight = Ice.createTempClass()
    class RgbLight(_M_SmartHome.Light):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Light', '::SmartHome::RgbLight')

        def ice_id(self, current=None):
            return '::SmartHome::RgbLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RgbLight'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def changeColor(self, request, current=None):
            raise NotImplementedError("servant method 'changeColor' not implemented")

        def getPresets(self, current=None):
            raise NotImplementedError("servant method 'getPresets' not implemented")

        def addPreset(self, name, color, current=None):
            raise NotImplementedError("servant method 'addPreset' not implemented")

        def editPreset(self, name, color, current=None):
            raise NotImplementedError("servant method 'editPreset' not implemented")

        def removePreset(self, name, current=None):
            raise NotImplementedError("servant method 'removePreset' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RgbLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_RgbLightDisp = IcePy.defineClass('::SmartHome::RgbLight', RgbLight, (), None, (_M_SmartHome._t_LightDisp,))
    RgbLight._ice_type = _M_SmartHome._t_RgbLightDisp

    RgbLight._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Color, False, 0), ())
    RgbLight._op_changeColor = IcePy.Operation('changeColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_RgbLightRequest, False, 0),), (), ((), _M_SmartHome._t_Color, False, 0), (_M_SmartHome._t_InvalidColorRangeException, _M_SmartHome._t_NonExistentPreset))
    RgbLight._op_getPresets = IcePy.Operation('getPresets', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_ColorPresets, False, 0), ())
    RgbLight._op_addPreset = IcePy.Operation('addPreset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_SmartHome._t_Color, False, 0)), (), None, (_M_SmartHome._t_InvalidColorRangeException,))
    RgbLight._op_editPreset = IcePy.Operation('editPreset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_SmartHome._t_Color, False, 0)), (), None, (_M_SmartHome._t_InvalidColorRangeException,))
    RgbLight._op_removePreset = IcePy.Operation('removePreset', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_SmartHome.RgbLight = RgbLight
    del RgbLight

# End of module SmartHome
