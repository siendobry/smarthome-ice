# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `closeable.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('generated.SmartHome')
__name__ = 'SmartHome'

_M_SmartHome._t_Closeable = IcePy.defineValue('::SmartHome::Closeable', Ice.Value, -1, (), False, True, None, ())

if 'CloseablePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.CloseablePrx = Ice.createTempClass()
    class CloseablePrx(Ice.ObjectPrx):

        def open(self, context=None):
            return _M_SmartHome.Closeable._op_open.invoke(self, ((), context))

        def openAsync(self, context=None):
            return _M_SmartHome.Closeable._op_open.invokeAsync(self, ((), context))

        def begin_open(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Closeable._op_open.begin(self, ((), _response, _ex, _sent, context))

        def end_open(self, _r):
            return _M_SmartHome.Closeable._op_open.end(self, _r)

        def close(self, context=None):
            return _M_SmartHome.Closeable._op_close.invoke(self, ((), context))

        def closeAsync(self, context=None):
            return _M_SmartHome.Closeable._op_close.invokeAsync(self, ((), context))

        def begin_close(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Closeable._op_close.begin(self, ((), _response, _ex, _sent, context))

        def end_close(self, _r):
            return _M_SmartHome.Closeable._op_close.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Closeable._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Closeable._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Closeable._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Closeable._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.CloseablePrx.ice_checkedCast(proxy, '::SmartHome::Closeable', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.CloseablePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Closeable'
    _M_SmartHome._t_CloseablePrx = IcePy.defineProxy('::SmartHome::Closeable', CloseablePrx)

    _M_SmartHome.CloseablePrx = CloseablePrx
    del CloseablePrx

    _M_SmartHome.Closeable = Ice.createTempClass()
    class Closeable(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Closeable')

        def ice_id(self, current=None):
            return '::SmartHome::Closeable'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Closeable'

        def open(self, current=None):
            raise NotImplementedError("servant method 'open' not implemented")

        def close(self, current=None):
            raise NotImplementedError("servant method 'close' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CloseableDisp)

        __repr__ = __str__

    _M_SmartHome._t_CloseableDisp = IcePy.defineClass('::SmartHome::Closeable', Closeable, (), None, ())
    Closeable._ice_type = _M_SmartHome._t_CloseableDisp

    Closeable._op_open = IcePy.Operation('open', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Closeable._op_close = IcePy.Operation('close', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Closeable._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_SmartHome.Closeable = Closeable
    del Closeable

# End of module SmartHome
